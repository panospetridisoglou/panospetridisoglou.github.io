@page "/"
@page "/search"
@inject NavigationManager NavManager


@foreach(var c in cardInfos)
            {
    @if (c.Tags.Any(x => tags.Any(y=>y.Contains(x)||x.Contains(y)) || tags.Count() == 0))
                {
                    <Portfolio.Client.Components.Card Title="@(c.Title)" Text="@(c.Text)" Href="@(c.Href)" Tags="@(c.Tags)" Image="@(c.Image)" Date="@(c.Date)"></Portfolio.Client.Components.Card>
                }
            }




@code{
    string tagsString = "";
    List<string> tags =new List<string>();
    List<Portfolio.Shared.CardInfo> cardInfos = new List<Portfolio.Shared.CardInfo>();

    protected  Task<String> GetStringFromGithub(string site)
    {

        return (new System.Net.Http.HttpClient()).GetStringAsync(site);
    }

    protected override async Task OnInitializedAsync()
    {
        string baseUri = NavManager.BaseUri;

        string allItems= await (new System.Net.Http.HttpClient()).GetStringAsync("https://api.github.com/repos/panospetridisoglou/Website-Pages/contents/");
        List<Portfolio.Shared.GithubFile> allCards = (List<Portfolio.Shared.GithubFile>)System.Text.Json.JsonSerializer.Deserialize(allItems, typeof(List<Portfolio.Shared.GithubFile>));
        var allCardsConfig = allCards.Where(x => x.name.Contains(".config")).ToList();
        foreach (var card in allCardsConfig)
        {
            var config = await GetStringFromGithub("https://raw.githubusercontent.com/panospetridisoglou/Website-Pages/main/" + card.name);
            Console.WriteLine(config);
            var configCard = (Portfolio.Shared.CardInfo)System.Text.Json.JsonSerializer.Deserialize(config, typeof(Portfolio.Shared.CardInfo));
            var md = await GetStringFromGithub("https://raw.githubusercontent.com/panospetridisoglou/Website-Pages/main/" + card.name.Replace(".config", ".md"));
            configCard.Text = md;
            cardInfos.Add(configCard);
        }
        /* cardInfos = new List<Portfolio.Shared.CardInfo>()
             {
             new Portfolio.Shared.CardInfo()
             {
                 Image = "/icon-512.png",
                 Title= "Energy Hub",
                 Tags=new List<string>(){ "WPF","C#","POSTGRES","APP" },
                 Href="energyhub",
                 Date=DateTime.Parse("2020-08-23"),
                 Text=await GetStringFromGithub("https://raw.githubusercontent.com/panospetridisoglou/Website-Pages/main/EnergyHub.md")

             },
             new Portfolio.Shared.CardInfo()
             {
                 Image = "/icon-512.png",
                 Title= "Update Checker",
                 Tags=new List<string>(){ "WPF","C#","POSTGRES","APP" },
                 Href="updatecheceker",
                 Date=DateTime.Parse("2019-10-15")
             },
             new Portfolio.Shared.CardInfo()
             {
                 Image = "/icon-512.png",
                 Title= "E Mailer",
                 Tags=new List<string>(){ "WPF","C#","APP" },
                 Href="emailer",
                 Date=DateTime.Parse("2020-12-07")
             },
             new Portfolio.Shared.CardInfo()
             {
                 Image = "/icon-512.png",
                 Title= "Mini Web CRM",
                 Tags=new List<string>(){ "BLAZOR","C#","NET. CORE","POSTGRES","APP" },
                 Href="miniwebcrm",
                 Date=DateTime.Parse("2021-11-01")
             }
             ,  new Portfolio.Shared.CardInfo()
 {
     Image = "/icon-512.png",
     Title= "KKingdom",
     Tags=new List<string>(){ "UNITY","C#","POSTGRES","GAME" },
     Href="kkingdom",
     Date=DateTime.Parse("2021-11-01")
 }
             ,  new Portfolio.Shared.CardInfo()
 {
     Image = "/icon-512.png",
     Title= "VR Shooter",
     Tags=new List<string>(){ "UNITY","C#","POSTGRES","VR","GAME" },
     Href="vrshooter",
     Date=DateTime.Parse("2021-11-01")
 }


             };
         try {
             Console.WriteLine(baseUri + "/pages/EnergyHub.md");
             Console.WriteLine(await (new System.Net.Http.HttpClient()).GetStringAsync(baseUri + "/pages/EnergyHub.md"));
         }
         catch(Exception ae)
         {
             Console.WriteLine(ae.Message + " " + ae.StackTrace + " ");
         }
        */
        GetQueryStringValues();
        NavManager.LocationChanged += HandleLocationChanged;
    }
    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        StateHasChanged();
    }

    void  GetQueryStringValues()
    {
        if (NavManager.Uri.Contains("search"))
        {
            try
            {

                tagsString = NavManager.Uri;
                tagsString = tagsString.Split(new[] { "tags=" }, StringSplitOptions.None)[1];
                tags = tagsString.ToUpper().Split('&').ToList();
                tags.RemoveAll(x => x == "");
                if (tags.Count() == 0) {
                    new Exception();
                }
                StateHasChanged();
            }
            catch {
                tags = new List<string>();
                StateHasChanged();
            }
        }
        else
        {
            tags = new List<string>();
            StateHasChanged();
        }
    }


}